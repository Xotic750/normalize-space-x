{"version":3,"sources":["../src/normalize-space-x.js"],"names":[],"mappings":"AAAA,OAAO,IAAP,IAAc,QAAd,QAA6B,QAA7B;AACA,OAAO,UAAP,IAAoB,UAApB,QAAqC,eAArC;AAEA,IAAM,KAAK,GAAG,GAAd;AACA,IAAM,SAAS,GAAG,OAAO,WAAzB;AACA,IAAM,eAAe,GAAG,IAAI,SAAJ,YAAkB,UAAlB,SAAkC,GAAlC,CAAxB;AACA,IAAM,eAAe,GAAG,IAAI,SAAJ,YAAkB,UAAlB,SAAkC,GAAlC,CAAxB;IACO,O,GAAW,K,CAAX,O;AAEP;;;;;;;;;;AASA,OAAO,SAAS,kBAAT,CAA4B,MAA5B,EAAoC;AACzC,SAAO,OAAO,CAAC,IAAR,CAAa,QAAQ,CAAC,MAAD,CAArB,EAA+B,eAA/B,EAAgD,KAAhD,CAAP;AACD;AAED;;;;;;;;;AAQA,eAAe,SAAS,kBAAT,CAA4B,MAA5B,EAAoC;AACjD,SAAO,OAAO,CAAC,IAAR,CAAa,IAAI,CAAC,MAAD,CAAjB,EAA2B,eAA3B,EAA4C,KAA5C,CAAP;AACD","file":"normalize-space-x.esm.js","sourcesContent":["import trim, {trim2016} from 'trim-x';\nimport whiteSpace, {string2016} from 'white-space-x';\n\nconst SPACE = ' ';\nconst RegExpCtr = /none/.constructor;\nconst reNormalize2016 = new RegExpCtr(`[${string2016}]+`, 'g');\nconst reNormalize2018 = new RegExpCtr(`[${whiteSpace}]+`, 'g');\nconst {replace} = SPACE;\n\n/**\n * This method strips leading and trailing white-space from a string,\n * replaces sequences of whitespace characters by a single space,\n * and returns the resulting string. (ES2016).\n *\n * @param {string} [string] - The string to be normalized.\n * @throws {TypeError} If string is null or undefined or not coercible.\n * @returns {string} The normalized string.\n */\nexport function normalizeSpace2016(string) {\n  return replace.call(trim2016(string), reNormalize2016, SPACE);\n}\n\n/**\n * This method strips leading and trailing white-space from a string,\n * replaces sequences of whitespace characters by a single space,\n * and returns the resulting string. (ES2018).\n *\n * @param {string} [string] - The string to be normalized.\n * @throws {TypeError} If string is null or undefined or not coercible.\n */\nexport default function normalizeSpace2018(string) {\n  return replace.call(trim(string), reNormalize2018, SPACE);\n}\n"]}