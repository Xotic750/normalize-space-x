{"version":3,"sources":["../src/normalize-space-x.js"],"names":[],"mappings":"AAAA,OAAO,IAAP,MAAiB,QAAjB;AACA,OAAO,UAAP,MAAuB,eAAvB;AACA,OAAO,SAAP,MAAsB,oBAAtB;AAEA,IAAM,KAAK,GAAG,GAAd;AACA,IAAM,SAAS,GAAG,OAAO,WAAzB;AACA,IAAM,WAAW,GAAG,IAAI,SAAJ,YAAkB,UAAlB,SAAkC,GAAlC,CAApB;AACA,IAAM,iBAAiB,GAAG,SAAS,CAAC,KAAK,CAAC,OAAP,CAAnC;AAEA;;;;;;;;;AAQA,IAAM,cAAc,GAAG,SAAS,cAAT,CAAwB,MAAxB,EAAgC;AACrD,SAAO,iBAAiB,CAAC,IAAI,CAAC,MAAD,CAAL,EAAe,WAAf,EAA4B,KAA5B,CAAxB;AACD,CAFD;;AAIA,eAAe,cAAf","file":"normalize-space-x.esm.js","sourcesContent":["import trim from 'trim-x';\nimport whiteSpace from 'white-space-x';\nimport methodize from 'simple-methodize-x';\n\nconst SPACE = ' ';\nconst RegExpCtr = /none/.constructor;\nconst reNormalize = new RegExpCtr(`[${whiteSpace}]+`, 'g');\nconst methodizedReplace = methodize(SPACE.replace);\n\n/**\n * This method strips leading and trailing white-space from a string,\n * replaces sequences of whitespace characters by a single space,\n * and returns the resulting string. (ES2019).\n *\n * @param {string} [string] - The string to be normalized.\n * @throws {TypeError} If string is null or undefined or not coercible.\n */\nconst normalizeSpace = function normalizeSpace(string) {\n  return methodizedReplace(trim(string), reNormalize, SPACE);\n};\n\nexport default normalizeSpace;\n"]}